@using System.Globalization
@using Microsoft.AspNetCore.Localization
@using Microsoft.Extensions.Localization
@using NsxLibraryManager.Resources
@inject IStringLocalizer<SharedResource> Localizer
@inject NavigationManager Navigation
@inject IJSRuntime JSRuntime

<div class="language-selector" title="@Localizer["SelectLanguage"]">
    <RadzenDropDown @bind-Value="@selectedLanguage" 
                    Data="@languages" 
                    TextProperty="DisplayName" 
                    ValueProperty="Code"
                    Change="@OnLanguageChanged"
                    Style="width: 140px;"
                    Placeholder="@Localizer["SelectLanguage"]" />
</div>

@code {
    private string selectedLanguage = "en";
    
    private List<LanguageOption> languages = new();

    protected override Task OnInitializedAsync()
    {
        // 지원되는 언어 목록 생성
        languages = new List<LanguageOption>
        {
            new LanguageOption { Code = "en", DisplayName = Localizer["English"] },
            new LanguageOption { Code = "ko", DisplayName = Localizer["Korean"] }
        };

        // 현재 문화권 정보를 가져와서 선택된 언어 설정
        var currentCulture = CultureInfo.CurrentUICulture.TwoLetterISOLanguageName;
        selectedLanguage = languages.Any(l => l.Code == currentCulture) ? currentCulture : "en";
        
        return Task.CompletedTask;
    }

    private async Task OnLanguageChanged(object value)
    {
        if (value?.ToString() is string newLanguage && newLanguage != selectedLanguage)
        {
            selectedLanguage = newLanguage;
            
            try
            {
                // 쿠키에 언어 설정 저장 (더 안전한 방식)
                var cookieValue = $"c={newLanguage}|uic={newLanguage}";
                var cookieName = CookieRequestCultureProvider.DefaultCookieName;
                
                await JSRuntime.InvokeVoidAsync("localStorage.setItem", "preferredLanguage", newLanguage);
                await JSRuntime.InvokeVoidAsync("eval", 
                    $"document.cookie = '{cookieName}={cookieValue}; path=/; max-age=31536000; SameSite=Lax'");
                
                // 페이지 새로고침
                Navigation.NavigateTo(Navigation.Uri, forceLoad: true);
            }
            catch (Exception ex)
            {
                // 로깅은 서버 사이드에서만 가능
                Console.WriteLine($"Language change error: {ex.Message}");
            }
        }
    }

    public class LanguageOption
    {
        public string Code { get; set; } = string.Empty;
        public string DisplayName { get; set; } = string.Empty;
        public string NativeName { get; set; } = string.Empty;
    }
}

<style>
    .language-selector {
        display: inline-flex;
        align-items: center;
        gap: 8px;
    }
    
    .language-selector .rz-dropdown {
        min-width: 140px;
    }
    
    .language-selector .rz-dropdown-item {
        display: flex;
        align-items: center;
        gap: 8px;
    }
</style>